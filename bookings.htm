{% extends master.master %}
{% block title %}{% if data.Local.Resource != null %} {{ data.Local.Resource.Name }} | {% endif %}{% T Events and bookings %} | {{ data.Business.Name }}{% endblock %}
{% block content %}

{% assign type = '' %}
{% assign qsType = data.QueryString["type"] %}
{% if qsType != null %}{% assign type = qsType %}{% endif %}

{% assign showMemberDetails = data.Setting_Calendars_ShowMemberDetailsInFeed %}
{% assign defaultView = data.Setting_Calendars_DefaultView %}
{% assign resourceInAgendaView = 50 %}
{% if defaultView == 1 and data.Resources.size > resourceInAgendaView %}{% assign defaultView = 'timelineDay' %}{% endif %}
{% if defaultView == 1 and data.Resources.size <= resourceInAgendaView %}{% assign defaultView = 'agendaDay' %}{% endif %}
{% if defaultView == 2 %}{% assign defaultView = 'agendaWeek' %}{% endif %}
{% if defaultView == 3 %}{% assign defaultView = 'month' %}{% endif %}
{% if defaultView == 4 %}{% assign defaultView = 'list' %}{% endif %}

{% assign qsView = data.QueryString["view"] %}
{% if qsView != null %}{% assign defaultView = qsView %}{% endif %}

{% if data.Local.ShowAll %}{% assign defaultView = 'agendaWeek' %}{% endif %}



<div id="wrapper">
  <!-- CONTAINER -->
  <div id="main" class="container">
    <div class="row">

      <!-- CONTENT -->
      <section id="content" class="span12">
    		{% if data.Resources.size > 0 %}
          <div class="nav nav--calendar clearfix"> 
            {% if data.Local.ShowAll == true %}
              <a class="btn btn-back btn-grey" href="{% Url Bookings, Index, ShowAll: false %}">{% T Back to Calendar %}</a>
            {% else %}
              <h3 class="pull-left">{% T My Bookings %}</h3>
            {% endif %}
            <div class="pull-right">
              <div class="filter dropdown">
                <a href="#" class="btn btn-orange btn-dropdown" data-toggle="dropdown">
                  {% if data.Local.ShowAll and data.Local.Resource %}{{data.Local.Resource.Name}}{% else %} {% T Make a Booking %} {% endif %}
                </a>
                <ul class="dropdown-menu dropdown-menu-right">
                  {% for resource in data.Resources %}
                    {% unless resource.Id == data.Local.Resource.Id %}
                      <li><a data-url="{% Url Bookings, Index, ResourceId: resource.Id, showAll: true %}" href="{% Url Bookings, Index, ResourceId: resource.Id, showAll: true %}">{{ resource.Name }}</a></li>
                    {% endunless %} 
                  {% endfor %}
                </ul>
              </div>
            </div>
          </div>
    		{% endif %}

        <div id="calendar"></div>
        <div class="row">
          <div class="span9">
            <a href="{% Url Bookings, Index %}"><span class="label"><span class="label-colour" style="background: black"></span>{% T Your bookings %}</span></a>
            <a href="{% Url Bookings, Index %}"><span class="label"><span class="label-colour" style="background: #484848"></span>{% T Your team %}</span></a>


            <span class="label"><span class="label-colour" style="background: #a1a1a1"></span>{% T Events %}</span>
            <br />
            {% for resource in data.Resources %}
            <a data-url="{% Url Bookings, Index, resourceId: resource.Id, showAll: data.Local.ShowAll %}" href="{% Url Bookings, Index, resourceId: resource.Id, showAll: data.Local.ShowAll %}">
              <span class="label resource"><span id="legend-resource-{{ resource.Id }}" class="label-colour" style="background: lightgray"></span>{{ resource.Name }}</span>
            </a>
            {% endfor %}
          </div>
        </div>

      </section>
      <!-- END CONTENT -->
    </div>
  </div>
  <!-- END CONTAINER -->
  {% include booking.htm %}
</div>

{% endblock %}
{% block script %}

<script>
    {% for resource in data.Resources %}
    $('#legend-resource-{{ resource.Id }}').css('background-color', getColurFromName('{{ resource.Name | Replace: "'", "\'" }}'));
    {% endfor %}
    $('#modal_unpaidbooking').modal();

    var resources = [
      {% if data.Local.Resource == null %}
         {% for resource in data.Resources %}
           {% assign resourceGroupKey = resource.GroupName | Clean %}
           {% assign resourceGroupName = resource.GroupName %}
           {% if resourceGroupKey == '' %}
             {% assign resourceGroupKey = 'resources' %}
             {% assign resourceGroupName = 'Resources' %}
           {% endif %}
           {% if type == resourceGroupKey or type == '' %}
             {'id':{{ resource.Id }}, 'groupName': '{{ resourceGroupName | Replace: "'", "\'" }}', 'title':'{{ resource.Name | Replace: "'", "\'" }}', eventColor: getColurFromName('{{ resource.Name | Replace: "'", "\'" }}')},
           {% endif %}
         {% endfor %}
       {% else %}
         {'id':{{ data.Local.Resource.Id }}, 'groupName': '{{ resourceGroupName | Replace: "'", "\'" }}', 'title':'{{ data.Local.Resource.Name | Replace: "'", "\'" }}', eventColor: getColurFromName('{{ data.Local.Resource.Name | Replace: "'", "\'" }}')}
       {% endif %}
    ];

    {% include 'event_json.js' %}
    
    function viewRender (view) {
      var date = view.intervalStart.format('YYYY-MM-DD');
      $('a[data-url]').each(function(){
        var url = $(this).attr('data-url');
        $(this).attr('href', url + (url.indexOf('?') > -1 ? '&' : '?') +'date=' + date + '&view=' + view.name);
      });
    }

    function eventsAfterAllRender (view) {
      if (view.type.startsWith('agenda')) {
        var row = 60;
        // setTimeout(function() {
        //   $(view.el).find('.fc-time-grid-container').scrollTop(row * 3)
        // }, 0);
      } else if (view.el.find('.fc-event-container').length == 0 && view.type == 'list') {
        view.el.find('tbody').append('<tr id="fc-empty-message"><td class="text-center"><span>No events for these dates.</span></td></tr>')
      } else {
        view.el.find('#fc-empty-message').remove();
      }
    }

    function eventClick (calEvent, jsEvent, view) {
      if(calEvent.url)
          window.location = calEvent.url;
      else if(calEvent.private) {
          showWarningMessage("{% T This is a booking made by another member of {0} ||  data.Business.Name %}");
          return false;
      }
      else
      {
          $('#Booking_Resource').val('{{ data.Local.Resource.Id }}');
          showBooking(calEvent);
          return false;
      }
    }

    function dayClick (date, evData, jsEvent, resourceObj ) {
      // if (!{{ data.Local.ShowAll }}) return;
      if (resourceObj) $('#Booking_Resource').val(resourceObj.id);
      else $('#Booking_Resource').val('{{ data.Local.Resource.Id }}');
      {% if data.Coworker != null %}
        createBooking(date.local().toDate());
      {% elseif data.Setting_Bookings_EnableGuestBookings %}
        createBooking(date.local().toDate());
      {% else %}
        showWarningMessage('{% T Login to make a booking %}');
      {% endif %}
    }

    function resourceRender (resourceObj, dataTds, eventTd) {
      {% for resource in data.Resources %}
      {% if resource.HasImage %}
        if(resourceObj.id == {{ resource.Id }}){
          dataTds.find('.fc-cell-text').prepend('<img data-toggle="lightbox" href="#resource-image-{{resource.Id}}"  style="cursor: pointer; display: inline; margin-right: 10px; border: 1px solid rgb(51, 51, 51)" src="{% Url PublicResources, GetImage, id: resource.Id, h: 20, w: 20 %}" />');
          $('#calendar').append('<div id="resource-image-{{resource.Id}}" class="lightbox hide fade"  tabindex="-1" role="dialog" aria-hidden="true"><div class="lightbox-content"><img src="{% Url PublicResources, GetImage, id: resource.Id, h: 600, w: 800 %}"/><div class="lightbox-caption"><p>{{ resource.Name | Replace: '\'', '\\'' }}</p></div></div></div>');
        }
      {% endif %}
      {% endfor %}
    }

    var vm;
    var fc = $('#calendar').fullCalendar({
      schedulerLicenseKey: '0011856468-fcs-1444557994',
      lang: '{{ data.Language }}',
      allDaySlot: false, 
      titleFormat: 'MMMM YYYY',
    	scrollTime: '09:00',
    	minTime:'06:00',
      aspectRatio: 2,
    	height: 'auto',
      firstDay: 1,
    	editable: false,
    	resourceLabelText: '{{ data.Business.Name | Replace: "'", "\'" }}',
    	resourceGroupField: 'groupName',
     	viewRender: viewRender,
      eventAfterAllRender: eventsAfterAllRender,
      resources: resources,
      eventClick: eventClick,
      dayClick: dayClick,
      defaultView: $(window).width() < 768 ? 'list' : '{{defaultView}}',
      editable: true,
      displayEventEnd: true,
      defaultDate: moment('{{ data.Local.CurrentDate | FormatDate: 'yyyy-MM-dd' }}'),
      header: {
          left:   'title',
          center: $(window).width() < 768 || {{ data.Local.ShowAll == false }} ? null : 'month,agendaWeek,{% if data.Local.Resource.Id > 0 or data.Resources.size <= resourceInAgendaView %}agendaDay{% else %}timelineDay{% endif %},list',
          right:  'today prev,next'
      },
      resourceRender: resourceRender,
      eventSources: eventSources,
      slotEventOverlap: false,
      views: {
        week: {
          columnFormat: 'ddd D/M'
        },
        day: {
          titleFormat: 'ddd, MMM Do YYYY'
        }
      }
    });

    $(function () {

        var coeff = 1000 * 60 * 15;
        var originalToDate;
        var originalFromDate;

        //Resource filter
        $('#resource-filter').change(function(){
            var resourceId = $(this).val();
            window.location = '{% Url Bookings, Index %}?showAll={{data.Local.ShowAll}}&resourceid=' + resourceId;
        });

        //Initialize timepickers
        $("#Booking_From").datetimepicker({ viewSelect: 'year', pickerPosition: 'bottom-left', language: '{{ data.Language }}', format: "dd MM yyyy - HH:ii P", minuteStep: 15, showMeridian: true, autoclose: true, todayBtn: true, startDate: '+0d', startView: 1 });
        $("#Booking_To").datetimepicker({ viewSelect: 'year', pickerPosition: 'bottom-left', language: '{{ data.Language }}', format: "dd MM yyyy - HH:ii P", minuteStep: 15, showMeridian: true, autoclose: true, todayBtn: true, startDate: '+0d', startView: 1 });

        $("#Booking_From input").attr('readonly','readonly');
        $("#Booking_To input").attr('readonly','readonly');

        //If todate is > from date, move to date ahead
        $('#Booking_From').on('changeDate', function(){
            var fromDate = $('#Booking_From').datetimepicker('getDate');
            var toDate = $('#Booking_To').datetimepicker('getDate');

            //Round the date
            fromDate = new Date(Math.round(fromDate.getTime() / coeff) * coeff);
            $('#Booking_From').datetimepicker('setDate', fromDate);

            var diffInMinutes = moment.duration(moment(originalToDate).diff(originalFromDate)).asMinutes();
            if(diffInMinutes < 60) diffInMinutes = 60;

            var later = moment(fromDate).add(diffInMinutes, 'minutes').toDate();
            $('#Booking_To').datetimepicker('setDate',later);

            originalFromDate = fromDate;
            originalToDate = later;

            checkBooking();
        });

        //If todate is > from date, move from date back
        $('#Booking_To').on('changeDate', function(){
            var fromDate = $('#Booking_From').datetimepicker('getDate');
            var toDate = $('#Booking_To').datetimepicker('getDate');

            //Round the date
            toDate = new Date(Math.round(toDate.getTime() / coeff) * coeff);
            $('#Booking_To').datetimepicker('setDate',toDate);

            if(fromDate > toDate){
                $('#Booking_From').datetimepicker('setDate',toDate);
            }

            originalFromDate = fromDate;
            originalToDate = toDate;

            checkBooking();
        });

        $('#modal_booking form').on("submit", function(event) {
            var id = $('#booking_id').val();
            var url;
            if(id > 0)
                url = '{% Url Bookings, BookingJson %}';
            else
                url = '{% Url Bookings, NewBookingJson %}';

            var fromDateFormatted = moment($('#Booking_From').datetimepicker('getDate')).format('YYYY-MM-DD');
            var data = getBookingData();
            postAndClose(url, data, function(){ window.location = '{% Url Bookings, Index %}?type={{ type }}&date=' + fromDateFormatted; });
            event.preventDefault();
        });

        $('#delete-button').click(function () {
            if (confirm('{% T Cancel this booking? %}'))
            {
                var url = '{% Url Bookings, DeleteJson %}';
                var id = $('#booking_id').val();
                var fromDateFormatted = moment($('#Booking_From').datetimepicker('getDate')).format('YYYY-MM-DD');
                postAndClose(url, {id: id}, function(){ window.location = '{% Url Bookings, Index %}?date=' + fromDateFormatted; });
            }
            return false;
        });

        $('#Booking_Resource').attr('data-bind','event: { change: updateProducts }');

        var loadProducts = function(){
            var bid = $('#booking_id').val();
            var rid = $('#Booking_Resource').val();
            if(bid && bid > 0 && rid && rid > 0) {
                return $.post('/en/bookings/GetResourceProducts?bookingId=' + bid + '&resourceId=' + rid);
            } else {
                return $.post('/en/bookings/GetResourceProducts?resourceId=' + $('#Booking_Resource').val());
            }
        }

        function hideOrShowFields() {
          var rid = $('#Booking_Resource').val();
          resource = resources.filter(function(r) {return r.id == rid})[0]
          $('[data-show-for]').hide()
          $('[data-show-for="' + resource.groupName + '"]').show()
        }

        var mapData = function(data){
            return vm.bookingProducts = ko.mapping.fromJS(data);
        }
        var updateData = function(data){
            return vm.bookingProducts = ko.mapping.fromJS(data, vm.bookingProducts);
        }
        var applyBindings = function() {
            return ko.applyBindings(vm);
        }
        var updateProducts = function(){
            hideOrShowFields();
            $.when(loadProducts())
             .then(updateData)
             .then(checkBooking);
        }
        vm = {
            bookingProducts: ko.observableArray(),
            updateProducts: updateProducts,
            checkBooking: checkBooking
        };

        $.when(loadProducts())
         .then(mapData)
         .then(applyBindings)
    });

    function getColurFromName(str){
        // Generate a Hash for the String
        var hash = function(word) {
            var h = 0;
            for (var i = 0; i < word.length; i++) {
                h = word.charCodeAt(i) + ((h << 5) - h);
            }
            return h;
        };

        // Change the darkness or lightness
        var shade = function(color, prc) {
            var num = parseInt(color, 16),
                amt = Math.round(2.55 * prc),
                R = (num >> 16) + amt,
                G = (num >> 8 & 0x00FF) + amt,
                B = (num & 0x0000FF) + amt;
            return (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
                    (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
                    (B < 255 ? B < 1 ? 0 : B : 255))
              .toString(16)
              .slice(1);

        };
        // Convert init to an RGBA
        var int_to_rgba = function(i) {
            var color = ((i >> 24) & 0xFF).toString(16) +
                ((i >> 16) & 0xFF).toString(16) +
                ((i >> 8) & 0xFF).toString(16) +
                (i & 0xFF).toString(16);
            return color;
        };

        return '#' + shade(int_to_rgba(hash(str)), -10);
    }

</script>
{% endblock %}
